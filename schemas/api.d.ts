/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ClientController_getClients"];
        put?: never;
        post: operations["ClientController_createClient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ClientController_deleteClient"];
        options?: never;
        head?: never;
        patch: operations["ClientController_updateClient"];
        trace?: never;
    };
    "/api/v1/collections/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CollectionController_getCollectionsDataTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CollectionController_getCollections"];
        put?: never;
        post: operations["CollectionController_createCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CollectionController_getCollection"];
        put?: never;
        post?: never;
        delete: operations["CollectionController_deleteCollection"];
        options?: never;
        head?: never;
        patch: operations["CollectionController_updateCollection"];
        trace?: never;
    };
    "/api/v1/collections/{id}/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Fields by collection id
         * @description This endpoint is used to list fields by collection
         */
        get: operations["FieldController_getFields"];
        put?: never;
        /**
         * Create Field within collection
         * @description This endpoint is used to create field within collection
         */
        post: operations["FieldController_createField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections/{id}/fields/{field_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Field by id
         * @description This endpoint is used to fetch field detail
         */
        get: operations["FieldController_getField"];
        put?: never;
        post?: never;
        /**
         * Delete Field by id
         * @description This endpoint is used to delete field along with any existing data
         */
        delete: operations["FieldController_deleteField"];
        options?: never;
        head?: never;
        /**
         * Update Field by id
         * @description This endpoint is used to update field detail
         */
        patch: operations["FieldController_updateField"];
        trace?: never;
    };
    "/api/v1/collections/{id}/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collection Data based on collection id
         * @description This endpoint is used to fetch data related to collection
         */
        get: operations["DataController_getCollectionData"];
        put?: never;
        /**
         * Post data record for collection by id
         * @description Post data for collection based on each field. Body for the endpoint need to populate dynamically based on field "key" values.
         */
        post: operations["DataController_addRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections/{id}/data/{record_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete collection data record by collection & record id
         * @description Delete existing record for collection based on collection & record id
         */
        delete: operations["DataController_deleteField"];
        options?: never;
        head?: never;
        /**
         * Patch collection data record by collection & record id
         * @description Update/Modify data for collection record by id. Body for the endpoint need to generate dynamically based on custom field "key" property.
         */
        patch: operations["DataController_updateRecord"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserDto: {
            /** Format: date-time */
            createdAt: string;
            id: string;
            email: string;
            firstName: string;
            lastName: string;
            emailVerified?: boolean;
            enabled?: boolean;
            totp?: boolean;
        };
        PaginatedMetaDocumented: {
            /** Number of items per page */
            itemsPerPage: number;
            /** Total number of items */
            totalItems: number;
            /** Current requested page */
            currentPage: number;
            /** Total number of pages */
            totalPages: number;
            /** Sorting by columns */
            sortBy?: (string | ("ASC" | "DESC"))[][];
            /** Search by fields */
            searchBy?: string[];
            /** Search term */
            search?: string;
            /** List of selected fields */
            select?: string[];
            /** Filters that applied to the query */
            filter?: Record<string, never>;
        };
        PaginatedLinksDocumented: {
            /** Link to first page */
            first?: string;
            /** Link to previous page */
            previous?: string;
            /** Link to current page */
            current?: string;
            /** Link to next page */
            next?: string;
            /** Link to last page */
            last?: string;
        };
        PaginatedDocumented: {
            /** Array of entities */
            data: Record<string, never>[];
            /** Pagination Metadata */
            meta: components["schemas"]["PaginatedMetaDocumented"];
            /** Links to pages */
            links: components["schemas"]["PaginatedLinksDocumented"];
        };
        CustomFields: {
            key?: string;
        };
        ResponseClientDto: {
            email?: string;
            firstname?: string;
            lastname?: string;
            customFields?: components["schemas"]["CustomFields"];
            phone?: string;
            address?: string;
            city?: string;
            zipcode?: string;
            country?: string;
            id?: number;
        };
        CreateClientDto: {
            email: string;
            firstname: string;
            lastname: string;
            customFields?: components["schemas"]["CustomFields"];
            phone?: string;
            address?: string;
            city?: string;
            zipcode?: string;
            country?: string;
        };
        UpdateClientDto: {
            email?: string;
            firstname?: string;
            lastname?: string;
            customFields?: components["schemas"]["CustomFields"];
            phone?: string;
            address?: string;
            city?: string;
            zipcode?: string;
            country?: string;
        };
        ResponseCustomFieldOptionsDto: {
            /**
             * @description Set type of custom field. attribute and group fields also dependent on type of custom field.
             * @example Address
             * @enum {string}
             */
            type: "Address" | "Checkbox" | "Currency" | "Date" | "DateTime" | "Email" | "GeoLocation" | "Number" | "Percent" | "Phone" | "Picklist" | "Text" | "Time" | "URL";
            /**
             * @description Detail information about custom field
             * @example Lets users enter a street, city, state or province, zip or postal code, and country.
             */
            description: string;
            /**
             * @description List of available fields in case of group type custom field
             * @example {
             *       "STREET": "Street",
             *       "CITY": "City",
             *       "STATE": "State",
             *       "COUNTRY": "Country",
             *       "ZIPCODE": "Zipcode"
             *     }
             */
            fields: Record<string, never>;
        };
        ResponseCollectionDto: {
            /**
             * @description Collection id unique number
             * @example 1
             */
            id: number;
            /**
             * @description Collection Name
             * @example System Automation
             */
            name: string;
        };
        CreateCollectionDto: {
            name: string;
        };
        UpdateCollectionDto: {
            name?: string;
        };
        ValidateDateFieldDto: {
            /**
             * Format: date-time
             * @description Min Date validation
             */
            min?: string;
            /**
             * Format: date-time
             * @description Max Date validation
             */
            max?: string;
        };
        DateField: {
            /** @description Display date in which format? like DD.MM.YYYY. Visit <a href="https://day.js.org/docs/en/parse/string-format#list-of-all-available-parsing-tokens" target="_blank">Day.js.org</a> for more detail. */
            format?: string;
            /** @description Date Validation object */
            validation?: components["schemas"]["ValidateDateFieldDto"];
            /** Format: date-time */
            defaultValue?: string;
        };
        ValidateEmailFieldDto: {
            /** @description list of possible domains from which email must include */
            includeDomain?: string[];
            /** @description list of possible domains from which email must not include */
            excludeDomain?: string[];
        };
        EmailField: {
            /** @description Either includeDomain or excludeDomain validation apply */
            validation?: components["schemas"]["ValidateEmailFieldDto"];
            defaultValue?: string;
        };
        NumberValidationDTO: {
            /** @description Min number limit */
            min?: number;
            /** @description Max number limit */
            max?: number;
        };
        NumberField: {
            validation?: components["schemas"]["NumberValidationDTO"];
            defaultValue?: number;
        };
        CheckBoxField: {
            defaultValue?: boolean;
        };
        ValidateCurrencyFieldDto: {
            /** @description Min currency limit */
            min?: number;
            /** @description Max currency limit */
            max?: number;
        };
        CurrencyField: {
            /** @description ISO 4217 currency code */
            currencyCode: string;
            validation?: components["schemas"]["ValidateCurrencyFieldDto"];
            defaultValue?: number;
        };
        ValidateTimeDto: {
            /** @description Min time limit */
            min?: string;
            /** @description Max time limit */
            max?: string;
        };
        TimeField: {
            validation?: components["schemas"]["ValidateTimeDto"];
            defaultValue?: string;
        };
        ValidateDateTimeFieldDto: {
            /**
             * Format: date-time
             * @description Min date time limit
             */
            min?: string;
            /**
             * Format: date-time
             * @description Max date time limit
             */
            max?: string;
        };
        DateTimeField: {
            /** @description Display date in which format? like DD.MM.YYYY HH:mm:ss. Visit <a href="https://day.js.org/docs/en/parse/string-format#list-of-all-available-parsing-tokens" target="_blank">Day.js.org</a> for more detail. */
            format?: string;
            validation?: components["schemas"]["ValidateDateTimeFieldDto"];
            /** Format: date-time */
            defaultValue?: string;
        };
        ValidatePercentDTO: {
            /** @description Min percentage limit */
            min?: number;
            /** @description Max percentage limit */
            max?: number;
        };
        PercentField: {
            validation?: components["schemas"]["ValidatePercentDTO"];
            defaultValue?: number;
        };
        PhoneField: {
            defaultValue?: string;
            isMobile?: boolean;
        };
        PickListField: {
            /** @description If multiSelect=true then value is Array otherwise String */
            defaultValue?: Record<string, never>;
            /** @description Possible value of list */
            list: string[];
            multiSelect: boolean;
        };
        ValidateTextDto: {
            /** @description Max length allowed for text field */
            length: number;
        };
        TextField: {
            validation?: components["schemas"]["ValidateTextDto"];
            defaultValue?: string;
        };
        ValidateUrlDTO: {
            /** @description pass multiple domains to accept URL from these domains only */
            includeDomain?: string[];
            /** @description pass multiple domains to reject URL from these domains */
            excludeDomain?: string[];
        };
        URLField: {
            validation?: components["schemas"]["ValidateUrlDTO"];
            defaultValue?: string;
        };
        ValidateAddressFieldDto: {
            /**
             * @description max length allowed for the field
             * @example 12
             */
            length: number;
        };
        AddressAttribute: {
            /**
             * @description default value for the field
             * @example eporum
             */
            defaultValue?: string;
            validation: components["schemas"]["ValidateAddressFieldDto"];
        };
        AddressField: {
            /**
             * @description Name of the field
             * @example Street Address
             */
            label: string;
            /**
             * @description Field is required? If so, at the time of adding data if not passed then system return error
             * @default false
             * @example true
             */
            required: boolean;
            /**
             * @description Field is unique? If so, at the time of adding data system will check for unique constraint
             * @default false
             * @example true
             */
            unique: boolean;
            /**
             * @description Pass text as tooltip for field
             * @default null
             * @example Enter complete address
             */
            helpText: string;
            attribute?: components["schemas"]["AddressAttribute"];
            /**
             * @description Address field possible types
             * @example Street
             * @enum {string}
             */
            type: "Street" | "City" | "State" | "Zipcode" | "Country";
        };
        GeoLocationAttribute: {
            /**
             * @description default value for lat or lng
             * @example -12.3456
             */
            defaultValue: string;
        };
        GeoLocationField: {
            /**
             * @description Name of the field
             * @example Street Address
             */
            label: string;
            /**
             * @description Field is required? If so, at the time of adding data if not passed then system return error
             * @default false
             * @example true
             */
            required: boolean;
            /**
             * @description Field is unique? If so, at the time of adding data system will check for unique constraint
             * @default false
             * @example true
             */
            unique: boolean;
            /**
             * @description Pass text as tooltip for field
             * @default null
             * @example Enter complete address
             */
            helpText: string;
            attribute?: components["schemas"]["GeoLocationAttribute"];
            /**
             * @description Address field possible types
             * @example Lat
             * @enum {string}
             */
            type: "Lat" | "Lng";
        };
        CreateFieldDto: {
            /**
             * @description Name of the field
             * @example Shipping Address
             */
            label: string;
            /**
             * @description Set type of custom field. attribute and group fields also dependent on type of custom field.
             * @example Address
             * @enum {string}
             */
            type: "Address" | "Checkbox" | "Currency" | "Date" | "DateTime" | "Email" | "GeoLocation" | "Number" | "Percent" | "Phone" | "Picklist" | "Text" | "Time" | "URL";
            /**
             * @description Field is required? If so, at the time of adding data if not passed then system return error
             * @default false
             * @example true
             */
            required: boolean;
            /**
             * @description Field is unique? If so, at the time of adding data system will check for unique constraint
             * @default false
             * @example true
             */
            unique: boolean;
            /**
             * @description Pass text as tooltip for field
             * @default null
             * @example Enter complete address
             */
            helpText: string;
            /** @description Required when type = 'PickListField' */
            attribute?: components["schemas"]["DateField"] | components["schemas"]["EmailField"] | components["schemas"]["NumberField"] | components["schemas"]["CheckBoxField"] | components["schemas"]["CurrencyField"] | components["schemas"]["TimeField"] | components["schemas"]["DateTimeField"] | components["schemas"]["PercentField"] | components["schemas"]["PhoneField"] | components["schemas"]["PickListField"] | components["schemas"]["TextField"] | components["schemas"]["URLField"];
            /** @description Required when type = 'AddressField' or 'GeoLocationField' */
            group?: (components["schemas"]["AddressField"] | components["schemas"]["GeoLocationField"])[];
        };
        CollectionDetailResponse: {
            /**
             * @description Collection id unique number
             * @example 1
             */
            id?: number;
            /**
             * @description Collection Name
             * @example System Automation
             */
            name?: string;
            /** @description One of Custom Field */
            fields?: components["schemas"]["CreateFieldDto"][];
        };
        ResponseFieldDto: {
            /**
             * @description Name of the field
             * @example Shipping Address
             */
            label?: string;
            /**
             * @description Set type of custom field. attribute and group fields also dependent on type of custom field.
             * @example Address
             * @enum {string}
             */
            type?: "Address" | "Checkbox" | "Currency" | "Date" | "DateTime" | "Email" | "GeoLocation" | "Number" | "Percent" | "Phone" | "Picklist" | "Text" | "Time" | "URL";
            /**
             * @description Field is required? If so, at the time of adding data if not passed then system return error
             * @default false
             * @example true
             */
            required: boolean;
            /**
             * @description Field is unique? If so, at the time of adding data system will check for unique constraint
             * @default false
             * @example true
             */
            unique: boolean;
            /**
             * @description Pass text as tooltip for field
             * @default null
             * @example Enter complete address
             */
            helpText: string;
            /** @description Required when type = 'PickListField' */
            attribute?: components["schemas"]["DateField"] | components["schemas"]["EmailField"] | components["schemas"]["NumberField"] | components["schemas"]["CheckBoxField"] | components["schemas"]["CurrencyField"] | components["schemas"]["TimeField"] | components["schemas"]["DateTimeField"] | components["schemas"]["PercentField"] | components["schemas"]["PhoneField"] | components["schemas"]["PickListField"] | components["schemas"]["TextField"] | components["schemas"]["URLField"];
            /** @description Required when type = 'AddressField' or 'GeoLocationField' */
            group?: (components["schemas"]["AddressField"] | components["schemas"]["GeoLocationField"])[];
            id: number;
        };
        UpdateFieldDto: {
            /**
             * @description Name of the field
             * @example Shipping Address
             */
            label?: string;
            /**
             * @description Set type of custom field. attribute and group fields also dependent on type of custom field.
             * @example Address
             * @enum {string}
             */
            type?: "Address" | "Checkbox" | "Currency" | "Date" | "DateTime" | "Email" | "GeoLocation" | "Number" | "Percent" | "Phone" | "Picklist" | "Text" | "Time" | "URL";
            /**
             * @description Field is required? If so, at the time of adding data if not passed then system return error
             * @default false
             * @example true
             */
            required: boolean;
            /**
             * @description Field is unique? If so, at the time of adding data system will check for unique constraint
             * @default false
             * @example true
             */
            unique: boolean;
            /**
             * @description Pass text as tooltip for field
             * @default null
             * @example Enter complete address
             */
            helpText: string;
            /** @description Required when type = 'PickListField' */
            attribute?: components["schemas"]["DateField"] | components["schemas"]["EmailField"] | components["schemas"]["NumberField"] | components["schemas"]["CheckBoxField"] | components["schemas"]["CurrencyField"] | components["schemas"]["TimeField"] | components["schemas"]["DateTimeField"] | components["schemas"]["PercentField"] | components["schemas"]["PhoneField"] | components["schemas"]["PickListField"] | components["schemas"]["TextField"] | components["schemas"]["URLField"];
            /** @description Required when type = 'AddressField' or 'GeoLocationField' */
            group?: (components["schemas"]["AddressField"] | components["schemas"]["GeoLocationField"])[];
        };
        DynamicDataResponseDto: {
            /**
             * @description Unique Record ID
             * @example 1
             */
            recordId: number;
            /**
             * @description An object containing dynamic key-value pairs
             * @example {
             *       "exampleKey": true,
             *       "exampleKey1": "exampleValue1",
             *       "exampleKey2": 2,
             *       "exampleKey3": [
             *         "Option A",
             *         "Option B"
             *       ],
             *       "exampleKey4": {
             *         "data1": "dataValue1",
             *         "data2": 1233
             *       }
             *     }
             */
            data: Record<string, never>;
        };
        DynamicDataPayloadDto: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UserController_getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of tenant users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    ClientController_getClients: {
        parameters: {
            query?: {
                /** @description Page number to retrieve.If you provide invalid value the default page number will applied
                 *             <p>
                 *                  <b>Example: </b> 1
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> 1
                 *               </p>
                 *              */
                page?: number;
                /** @description Number of records per page.
                 *           <p>
                 *                  <b>Example: </b> 20
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> 20
                 *               </p>
                 *           <p>
                 *                  <b>Max Value: </b> 100
                 *               </p>
                 *
                 *           If provided value is greater than max value, max value will be applied.
                 *            */
                limit?: number;
                /** @description Filter by email query param.
                 *               <p>
                 *                  <b>Format: </b> filter.email={$not}:OPERATION:VALUE
                 *               </p>
                 *               <p>
                 *                  <b>Example: </b> filter.email=$not:$like:John Doe&filter.email=like:John
                 *               </p>
                 *               <h4>Available Operations</h4><ul><li>$eq</li>
                 *     <li>$contains</li></ul> */
                "filter.email"?: string[];
                /** @description Filter by lastname query param.
                 *               <p>
                 *                  <b>Format: </b> filter.lastname={$not}:OPERATION:VALUE
                 *               </p>
                 *               <p>
                 *                  <b>Example: </b> filter.lastname=$not:$like:John Doe&filter.lastname=like:John
                 *               </p>
                 *               <h4>Available Operations</h4><ul><li>$and</li>
                 *     <li>$or</li>
                 *     <li>$not</li>
                 *     <li>$eq</li>
                 *     <li>$gt</li>
                 *     <li>$gte</li>
                 *     <li>$in</li>
                 *     <li>$null</li>
                 *     <li>$lt</li>
                 *     <li>$lte</li>
                 *     <li>$btw</li>
                 *     <li>$ilike</li>
                 *     <li>$sw</li>
                 *     <li>$contains</li></ul> */
                "filter.lastname"?: string[];
                /** @description Filter by firstname query param.
                 *               <p>
                 *                  <b>Format: </b> filter.firstname={$not}:OPERATION:VALUE
                 *               </p>
                 *               <p>
                 *                  <b>Example: </b> filter.firstname=$not:$like:John Doe&filter.firstname=like:John
                 *               </p>
                 *               <h4>Available Operations</h4><ul><li>$and</li>
                 *     <li>$or</li>
                 *     <li>$not</li>
                 *     <li>$eq</li>
                 *     <li>$gt</li>
                 *     <li>$gte</li>
                 *     <li>$in</li>
                 *     <li>$null</li>
                 *     <li>$lt</li>
                 *     <li>$lte</li>
                 *     <li>$btw</li>
                 *     <li>$ilike</li>
                 *     <li>$sw</li>
                 *     <li>$contains</li></ul> */
                "filter.firstname"?: string[];
                /** @description Filter by customFields query param.
                 *               <p>
                 *                  <b>Format: </b> filter.customFields={$not}:OPERATION:VALUE
                 *               </p>
                 *               <p>
                 *                  <b>Example: </b> filter.customFields=$not:$like:John Doe&filter.customFields=like:John
                 *               </p>
                 *               <h4>Available Operations</h4><ul><li>$and</li>
                 *     <li>$or</li>
                 *     <li>$not</li>
                 *     <li>$eq</li>
                 *     <li>$gt</li>
                 *     <li>$gte</li>
                 *     <li>$in</li>
                 *     <li>$null</li>
                 *     <li>$lt</li>
                 *     <li>$lte</li>
                 *     <li>$btw</li>
                 *     <li>$ilike</li>
                 *     <li>$sw</li>
                 *     <li>$contains</li></ul> */
                "filter.customFields"?: string[];
                /** @description Parameter to sort by.
                 *           <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>
                 *           <p>
                 *                  <b>Format: </b> fieldName:DIRECTION
                 *               </p>
                 *           <p>
                 *                  <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> No default sorting specified, the result order is not guaranteed
                 *               </p>
                 *           <h4>Available Fields</h4><ul><li>email</li>
                 *     <li>lastname</li>
                 *     <li>firstname</li>
                 *     <li>customFields</li></ul>
                 *            */
                sortBy?: ("email:ASC" | "email:DESC" | "lastname:ASC" | "lastname:DESC" | "firstname:ASC" | "firstname:DESC" | "customFields:ASC" | "customFields:DESC")[];
                /** @description Search term to filter result values
                 *             <p>
                 *                  <b>Example: </b> John
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> No default value
                 *               </p>
                 *              */
                search?: string;
                /** @description List of fields to search by term to filter result values
                 *             <p>
                 *                  <b>Example: </b> email,firstname,lastname,customFields
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> By default all fields mentioned below will be used to search by term
                 *               </p>
                 *             <h4>Available Fields</h4><ul><li>email</li>
                 *     <li>firstname</li>
                 *     <li>lastname</li>
                 *     <li>customFields</li></ul>
                 *              */
                searchBy?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumented"] & {
                        data?: components["schemas"]["ResponseClientDto"][];
                        meta?: {
                            select?: string[];
                            filter?: {
                                email?: string | string[];
                                lastname?: string | string[];
                                firstname?: string | string[];
                                customFields?: string | string[];
                            };
                        };
                    };
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    ClientController_createClient: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateClientDto"];
            };
        };
        responses: {
            /** @description Create Client */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseClientDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    ClientController_deleteClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete Client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    ClientController_updateClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateClientDto"];
            };
        };
        responses: {
            /** @description Update Client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseClientDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    CollectionController_getCollectionsDataTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get list of Collections Data Types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseCustomFieldOptionsDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    CollectionController_getCollections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get list of Collections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseCollectionDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    CollectionController_createCollection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCollectionDto"];
            };
        };
        responses: {
            /** @description Create Collection */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseCollectionDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    CollectionController_getCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollectionDetailResponse"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    CollectionController_deleteCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete Collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    CollectionController_updateCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCollectionDto"];
            };
        };
        responses: {
            /** @description Update Collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseCollectionDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    FieldController_getFields: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Fields */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseFieldDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    FieldController_createField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fieldId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFieldDto"];
            };
        };
        responses: {
            /** @description Create Field */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseFieldDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    FieldController_getField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fieldId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Field
             *     I'm changing response based on interceptor so how i can return response
             *     Promise<ResponseFieldDto> while system suppose that data is array */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseFieldDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    FieldController_deleteField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fieldId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete Field */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    FieldController_updateField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fieldId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFieldDto"];
            };
        };
        responses: {
            /** @description Update Field
             *     I'm changing response based on interceptor so how i can return response
             *     Promise<ResponseFieldDto> while system suppose that data is array */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseFieldDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    DataController_getCollectionData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DynamicDataResponseDto"][];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    DataController_addRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: Record<string, never>;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DynamicDataResponseDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    DataController_deleteField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                record_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description confirm record deleted successfully */
                        status?: boolean;
                    };
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
    DataController_updateRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                record_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DynamicDataResponseDto"];
                };
            };
            /** @description Validation Failed - Error return due to validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 400 */
                        statusCode?: number;
                        /** @example Validation Failed */
                        message?: string;
                        errors?: {
                            /** @example short_intro */
                            field?: string;
                            /** @example short_intro must be shorter than or equal to 50 characters */
                            error?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized - User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 401 */
                        statusCode?: number;
                        /** @example Unauthorized */
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - User is not authorized to access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 403 */
                        statusCode?: number;
                        /** @example Forbidden resource */
                        message?: string;
                        /** @example Forbidden */
                        error?: string;
                    };
                };
            };
            /** @description Not Found - resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description error message
                         * @example No data found
                         */
                        message?: string;
                        /**
                         * @description error identifier
                         * @example Not Found
                         */
                        error?: string;
                        /**
                         * @description error code
                         * @example 404
                         */
                        statusCode?: number;
                    };
                };
            };
        };
    };
}
